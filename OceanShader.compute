// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FillVertexBuffer
#pragma kernel FillTriangleBuffer
#pragma kernel SimulateWaves
#pragma kernel CalculateNormals

// Parameters for setting up the vertices and triangles
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<int> triangleBuffer;
float vertexSpread; 
int oceanWidthVertexCount;
int oceanLengthVertexCount;

// Parameters for simulating waves
RWStructuredBuffer<float3> normalBuffer;
Texture2D noiseTexture;
SamplerState samplerState;
float waveAmplitude;
float time;


[numthreads(32,32,1)]
void FillVertexBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= (uint)oceanWidthVertexCount || id.y > (uint)oceanLengthVertexCount) {
        return;
    }

    int index = id.y * oceanWidthVertexCount + id.x;
    vertexBuffer[index] = float3(id.x * vertexSpread, 0, id.y * vertexSpread);
}

[numthreads(32,32,1)]
void FillTriangleBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= ((uint)oceanWidthVertexCount - 1) || id.y >= ((uint)oceanLengthVertexCount - 1)) {
        return;
    }
    
    int baseIndex = (id.y * (oceanWidthVertexCount - 1) + id.x) * 6;

    int bottomLeft = id.y * oceanWidthVertexCount + id.x;
    int topLeft = bottomLeft + oceanWidthVertexCount;
    int topRight = topLeft + 1;
    int bottomRight = bottomLeft + 1;

    // Top-left, Top-right, Bottom-left
    triangleBuffer[baseIndex] = bottomLeft;
    triangleBuffer[baseIndex + 1] = topLeft;
    triangleBuffer[baseIndex + 2] = topRight;

    // Top-right, Bottom-right, Bottom-left
    triangleBuffer[baseIndex + 3] = topRight;
    triangleBuffer[baseIndex + 4] = bottomRight;
    triangleBuffer[baseIndex + 5] = bottomLeft;
}

float OceanWaveHeight(float4 noise, float time) {

    // Animate UVs independently for each layer
    float layer1 = noise.r * 0.6; // Large swells
    float layer2 = noise.g * 0.3; // Medium waves
    float layer3 = noise.b * 0.2; // Choppy waves
    float layer4 = noise.a * 0.1; // Fine ripples

    float baseOffset = (0.6 + 0.3 + 0.2 + 0.1) * 0.5;

    // Combine layers with weights
    return (layer1 + layer2 + layer3 + layer4) / 1.2 - 0.5;
}

[numthreads(32,32,1)]
void SimulateWaves (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)oceanWidthVertexCount || id.y >= (uint)oceanLengthVertexCount) {
        return;
    }

    // Calculate the index in the vertex buffer
    int index = id.y * oceanWidthVertexCount + id.x;
    // Get the current position of the vertex
    float3 position = vertexBuffer[index];

    float2 uv = float2(id.x / (float)oceanWidthVertexCount, id.y / (float)oceanLengthVertexCount);
    uint width, height;
    noiseTexture.GetDimensions(width, height); // Get the texture dimensions
    uint2 texCoord = uint2(uv * uint2(width, height));         // Map the UV to integer texture coordinates
    float4 noise = noiseTexture.Load(int3(texCoord, 0)); 

    // Update the vertex position with the new wave height
    float waveHeight = OceanWaveHeight(noise, time);
    position.y = 0.0 + waveHeight * waveAmplitude;
    vertexBuffer[index] = position;
}

[numthreads(32,32,1)]
void CalculateNormals (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)oceanWidthVertexCount || id.y >= (uint)oceanLengthVertexCount) {
        return;
    }

    // Calculate the index in the vertex buffer
    int index = id.y * oceanWidthVertexCount + id.x;

    // Get the current position of the vertex (already updated by the first pass)
    float3 position = vertexBuffer[index];

    // Calculate the normal for the current vertex based on its neighbors
    float3 normal = float3(0.0, 1.0, 0.0);  // Default "flat" normal
    if (id.x < (uint)(oceanWidthVertexCount - 1) && id.y < (uint)(oceanLengthVertexCount - 1)) {
        // Get the neighboring vertices
        float3 p0 = vertexBuffer[index]; // Current vertex (updated position)
        float3 p1 = vertexBuffer[index + 1]; // Neighbor to the right
        float3 p2 = vertexBuffer[index + oceanWidthVertexCount]; // Neighbor below

        // Calculate the two edges of the triangle
        float3 edge1 = p1 - p0;
        float3 edge2 = p2 - p0;
        normal = normalize(cross(edge1, edge2));
    }

    // Store the updated normal back in the normal buffer
    normalBuffer[index] = normal;
}

