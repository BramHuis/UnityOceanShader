// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FillVertexBuffer
#pragma kernel FillTriangleBuffer
#pragma kernel SimulateWaves
#pragma kernel CalculateNormals

// Parameters for setting up the vertices and triangles
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<int> triangleBuffer;
float3 oceanStartPosition;
int numberOfVerticesPerSide;
float oceanWidth;
float oceanLength;

// Parameters for simulating waves
RWStructuredBuffer<float3> normalBuffer;
// Texture2D noiseTexture;
// SamplerState samplerState;
float waveAmplitude;
float waveSteepness;
float wavePhaseShift;
float waveLength;
float2 windDirection;
float time;

#define PI 3.14159265359

struct GerstnerWave {
    float amplitude;
    float wavelength;
    float2 direction;
    float phaseShift;
};


[numthreads(32,32,1)]
void FillVertexBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= (uint)numberOfVerticesPerSide || id.y > (uint)numberOfVerticesPerSide) {
        return;
    }

    int index = id.y * numberOfVerticesPerSide + id.x;
    float xStep = oceanWidth / (numberOfVerticesPerSide - 1);
    float zStep = oceanLength / (numberOfVerticesPerSide - 1);
    vertexBuffer[index] = float3(oceanStartPosition.x + id.x * xStep, oceanStartPosition.y, oceanStartPosition.z + id.y * zStep);
}

[numthreads(32,32,1)]
void FillTriangleBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= ((uint)numberOfVerticesPerSide - 1) || id.y >= ((uint)numberOfVerticesPerSide - 1)) {
        return;
    }
    
    int baseIndex = (id.y * (numberOfVerticesPerSide - 1) + id.x) * 6;

    int bottomLeft = id.y * numberOfVerticesPerSide + id.x;
    int topLeft = bottomLeft + numberOfVerticesPerSide;
    int topRight = topLeft + 1;
    int bottomRight = bottomLeft + 1;

    // Top-left, Top-right, Bottom-left
    triangleBuffer[baseIndex] = bottomLeft;
    triangleBuffer[baseIndex + 1] = topLeft;
    triangleBuffer[baseIndex + 2] = topRight;

    // Top-right, Bottom-right, Bottom-left
    triangleBuffer[baseIndex + 3] = bottomLeft;
    triangleBuffer[baseIndex + 4] = topRight;
    triangleBuffer[baseIndex + 5] = bottomRight;
}

float3 gerstner(float3 vertex, float2 direction, float time, float amplitude, float wavelength, float waveSteepness, float wavePhaseShift)
{
    // Compute the wave number (k = 2 * pi / wavelength)
    float k = 2.0 * PI / wavelength;
    
    // Compute the dot product between the wave direction and the position in the xz-plane
    float dotProduct = dot(direction, vertex.xz);
    
    // Compute the wave phase based on the wave number, dot product, and time
    float wavePhase = k * dotProduct + time + wavePhaseShift;
    
    // Calculate the horizontal displacement for the x and z axes
    // The horizontal displacement depends on both amplitude, steepness, and wavelength
    float horizontalDisplacement = (amplitude / wavelength) * cos(wavePhase) * waveSteepness;
    
    // Apply the displacement in the x and z directions
    float displaced_x = vertex.x + direction.x * horizontalDisplacement;
    float displaced_z = vertex.z + direction.y * horizontalDisplacement;
    
    // Vertical displacement based on the sine wave
    float displaced_y = vertex.y + amplitude * sin(wavePhase);
    
    // Return the displaced position
    return float3(displaced_x, displaced_y, displaced_z);
}

[numthreads(32,32,1)]
void SimulateWaves (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)numberOfVerticesPerSide || id.y >= (uint)numberOfVerticesPerSide) {
        return;
    }

    
    // Calculate the index in the vertex buffer
    int index = id.y * numberOfVerticesPerSide + id.x;
    float xStep = oceanWidth / (numberOfVerticesPerSide - 1);
    float zStep = oceanLength / (numberOfVerticesPerSide - 1);
    float3 originalVertexPos = float3(oceanStartPosition.x + id.x * xStep, oceanStartPosition.y, oceanStartPosition.z + id.y * zStep);

    vertexBuffer[index] = gerstner(originalVertexPos, windDirection, time, waveAmplitude, waveLength, waveSteepness, wavePhaseShift);
}

[numthreads(32,32,1)]
void CalculateNormals (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)(numberOfVerticesPerSide - 1) || id.y >= (uint)(numberOfVerticesPerSide - 1)) {
        return;
    }
    
    // Calculate the base index for this quad's two triangles
    uint baseIndex = (id.y * (numberOfVerticesPerSide - 1) + id.x) * 6;
    [unroll]
    for (int tri = 0; tri < 2; tri++) {
        int index0 = triangleBuffer[baseIndex + tri * 3];
        int index1 = triangleBuffer[baseIndex + tri * 3 + 1];
        int index2 = triangleBuffer[baseIndex + tri * 3 + 2];

        float3 p0 = vertexBuffer[index0];
        float3 p1 = vertexBuffer[index1];
        float3 p2 = vertexBuffer[index2];

        float3 normal = normalize(cross(p1 - p0, p2 - p0));
        normalBuffer[baseIndex + tri * 3] = normal;  // Store normal for vertex 0
        normalBuffer[baseIndex + tri * 3 + 1] = normal;  // Store normal for vertex 1
        normalBuffer[baseIndex + tri * 3 + 2] = normal; // Store per-triangle normal
    }
}



