//https://adrianb.io/2014/08/09/perlinnoise.html Perlin Noise

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FillVertexBuffer
#pragma kernel FillTriangleBuffer
#pragma kernel SimulateWaves
#pragma kernel CalculateNormals

// Parameters for setting up the vertices and triangles
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<int> triangleBuffer;
float vertexSpread; 
int oceanWidthVertexCount;
int oceanLengthVertexCount;

// Parameters for simulating waves
RWStructuredBuffer<float3> normalBuffer;
Texture2D noiseTexture;
SamplerState samplerState;
float waveAmplitude;
float time;


[numthreads(32,32,1)]
void FillVertexBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= (uint)oceanWidthVertexCount || id.y > (uint)oceanLengthVertexCount) {
        return;
    }

    int index = id.y * oceanWidthVertexCount + id.x;
    vertexBuffer[index] = float3(id.x * vertexSpread, 0, id.y * vertexSpread);
}

[numthreads(32,32,1)]
void FillTriangleBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= ((uint)oceanWidthVertexCount - 1) || id.y >= ((uint)oceanLengthVertexCount - 1)) {
        return;
    }
    
    int baseIndex = (id.y * (oceanWidthVertexCount - 1) + id.x) * 6;

    int bottomLeft = id.y * oceanWidthVertexCount + id.x;
    int topLeft = bottomLeft + oceanWidthVertexCount;
    int topRight = topLeft + 1;
    int bottomRight = bottomLeft + 1;

    // Top-left, Top-right, Bottom-left
    triangleBuffer[baseIndex] = bottomLeft;
    triangleBuffer[baseIndex + 1] = topLeft;
    triangleBuffer[baseIndex + 2] = topRight;

    // Top-right, Bottom-right, Bottom-left
    triangleBuffer[baseIndex + 3] = topRight;
    triangleBuffer[baseIndex + 4] = bottomRight;
    triangleBuffer[baseIndex + 5] = bottomLeft;
}

float fade(float t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float grad(int hash, float2 p) {
    // Hash is used to generate pseudo-random gradient directions
    int h = hash & 15;
    float2 g = (h < 8) ? float2(1.0, 0.0) : float2(0.0, 1.0); // Gradient directions

    // Return the dot product of the gradient and position vector `p`
    return (h & 1 ? g.x : -g.x) * p.x + (h & 2 ? g.y : -g.y) * p.y;
}

float hash(int n) {
    return frac(sin(n) * 43758.5453);
}

float perlinNoise(float2 p) {
    // Grid cell coordinates
    int2 pi = floor(p);
    float2 pf = frac(p);

    // Apply fade function to each component of the float2 separately
    float2 u = float2(fade(pf.x), fade(pf.y));

    // Hash values at grid points
    int a = hash(pi.x + pi.y * 57);
    int b = hash(pi.x + 1 + pi.y * 57);
    int c = hash(pi.x + (pi.y + 1) * 57);
    int d = hash(pi.x + 1 + (pi.y + 1) * 57);

    // Gradient vectors at grid points
    float gradA = grad(a, pf);
    float gradB = grad(b, pf - float2(1.0, 0.0));
    float gradC = grad(c, pf - float2(0.0, 1.0));
    float gradD = grad(d, pf - float2(1.0, 1.0));

    // Interpolation between grid points
    float lerpX1 = lerp(gradA, gradB, u.x);
    float lerpX2 = lerp(gradC, gradD, u.x);

    // Final interpolation for 2D Perlin noise
    return lerp(lerpX1, lerpX2, u.y);
}

[numthreads(32,32,1)]
void SimulateWaves (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)oceanWidthVertexCount || id.y >= (uint)oceanLengthVertexCount) {
        return;
    }

    // Calculate the index in the vertex buffer
    int index = id.y * oceanWidthVertexCount + id.x;
    // Get the current position of the vertex
    float3 position = vertexBuffer[index];

    // Update the vertex position with the new wave height
    float waveHeight = perlinNoise(position.xy);
    position.y = waveHeight * waveAmplitude;
    vertexBuffer[index] = position;
}

[numthreads(32,32,1)]
void CalculateNormals (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)oceanWidthVertexCount || id.y >= (uint)oceanLengthVertexCount) {
        return;
    }

    // Calculate the index in the vertex buffer
    int index = id.y * oceanWidthVertexCount + id.x;

    // Get the current position of the vertex (already updated by the first pass)
    float3 position = vertexBuffer[index];

    // Calculate the normal for the current vertex based on its neighbors
    float3 normal = float3(0.0, 1.0, 0.0);  // Default "flat" normal
    if (id.x < (uint)(oceanWidthVertexCount - 1) && id.y < (uint)(oceanLengthVertexCount - 1)) {
        // Get the neighboring vertices
        float3 p0 = vertexBuffer[index]; // Current vertex (updated position)
        float3 p1 = vertexBuffer[index + 1]; // Neighbor to the right
        float3 p2 = vertexBuffer[index + oceanWidthVertexCount]; // Neighbor below

        // Calculate the two edges of the triangle
        float3 edge1 = p1 - p0;
        float3 edge2 = p2 - p0;
        normal = normalize(cross(edge1, edge2));
    }

    // Store the updated normal back in the normal buffer
    normalBuffer[index] = normal;
}

