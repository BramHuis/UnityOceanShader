// https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FillVertexBuffer
#pragma kernel FillTriangleBuffer
#pragma kernel SimulateWaves
#pragma kernel CalculateNormals
#pragma kernel CalculateNormalsSmooth
#pragma kernel NormalizeNormalsSmooth
#pragma kernel RetrieveOceanHeight

struct GerstnerWave {
    int toggle;
    float waveAmplitude;
    float waveSteepness;
    float wavePhaseShift;
    float waveLength;
    float waveSpeed;
    float2 windDirection;
};

// Parameters for setting up the vertices and triangles
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<int> triangleBuffer;
float3 oceanStartPosition;
int numberOfVerticesPerSide;
float oceanWidth;
float oceanLength;

// Parameters for simulating waves
RWStructuredBuffer<float3> normalBuffer;
RWStructuredBuffer<int> atomicNormalBuffer;
StructuredBuffer<GerstnerWave> gerstnerWaveBuffer;
int numberOfGerstnerWaves;
float time;
#define PI 3.14159265359

RWStructuredBuffer<float2> positionsToRetrieveHeightFromBuffer;
int heightPointsArrayLength;


[numthreads(32, 32 ,1)]
void FillVertexBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= (uint)numberOfVerticesPerSide || id.y > (uint)numberOfVerticesPerSide) {
        return;
    }

    int index = id.y * numberOfVerticesPerSide + id.x;
    float xStep = oceanWidth / (numberOfVerticesPerSide - 1);
    float zStep = oceanLength / (numberOfVerticesPerSide - 1);
    vertexBuffer[index] = float3(oceanStartPosition.x + id.x * xStep, oceanStartPosition.y, oceanStartPosition.z + id.y * zStep);
}

[numthreads(32, 32 ,1)]
void FillTriangleBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= ((uint)numberOfVerticesPerSide - 1) || id.y >= ((uint)numberOfVerticesPerSide - 1)) {
        return;
    }
    
    int baseIndex = (id.y * (numberOfVerticesPerSide - 1) + id.x) * 6;

    int bottomLeft = id.y * numberOfVerticesPerSide + id.x;
    int topLeft = bottomLeft + numberOfVerticesPerSide;
    int topRight = topLeft + 1;
    int bottomRight = bottomLeft + 1;

    // Top-left, Top-right, Bottom-left
    triangleBuffer[baseIndex] = bottomLeft;
    triangleBuffer[baseIndex + 1] = topLeft;
    triangleBuffer[baseIndex + 2] = topRight;

    // Top-right, Bottom-right, Bottom-left
    triangleBuffer[baseIndex + 3] = bottomLeft;
    triangleBuffer[baseIndex + 4] = topRight;
    triangleBuffer[baseIndex + 5] = bottomRight;
}

float3 Gerstner(float3 vertex, float2 direction, float time, float speed, float steepness, float amplitude, float wavelength) {
	float displaced_x = (steepness / wavelength) * direction.x * cos(wavelength * dot(direction, vertex.xz) + speed * time);
	float displaced_z = (steepness / wavelength) * direction.y * cos(wavelength * dot(direction, vertex.xz) + speed * time);
	float displaced_y = amplitude * sin(wavelength * dot(direction, vertex.xz) + speed * time);
	return float3(displaced_x, displaced_y, displaced_z);
}

[numthreads(32, 32 ,1)]
void SimulateWaves (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)numberOfVerticesPerSide || id.y >= (uint)numberOfVerticesPerSide) {
        return;
    }

    
    // Calculate the index in the vertex buffer
    int index = id.y * numberOfVerticesPerSide + id.x;
    float xStep = oceanWidth / (numberOfVerticesPerSide - 1);
    float zStep = oceanLength / (numberOfVerticesPerSide - 1);
    float3 originalVertexPos = float3(oceanStartPosition.x + id.x * xStep, oceanStartPosition.y, oceanStartPosition.z + id.y * zStep);

    float3 finalPosition;
    for (int i = 0; i < numberOfGerstnerWaves; i++) {
        if (gerstnerWaveBuffer[i].toggle) {
            finalPosition += Gerstner(originalVertexPos, gerstnerWaveBuffer[i].windDirection, time, gerstnerWaveBuffer[i].waveSpeed, gerstnerWaveBuffer[i].waveSteepness, gerstnerWaveBuffer[i].waveAmplitude, gerstnerWaveBuffer[i].waveLength);
        }
    }
    vertexBuffer[index] = originalVertexPos + finalPosition;
}

[numthreads(32, 32 ,1)]
void CalculateNormals (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)(numberOfVerticesPerSide - 1) || id.y >= (uint)(numberOfVerticesPerSide - 1)) {
        return;
    }
    
    // Calculate the base index for this quad's two triangles
    uint baseIndex = (id.y * (numberOfVerticesPerSide - 1) + id.x) * 6;
    [unroll]
    for (int tri = 0; tri < 2; tri++) {
        int index0 = triangleBuffer[baseIndex + tri * 3];
        int index1 = triangleBuffer[baseIndex + tri * 3 + 1];
        int index2 = triangleBuffer[baseIndex + tri * 3 + 2];

        float3 p0 = vertexBuffer[index0];
        float3 p1 = vertexBuffer[index1];
        float3 p2 = vertexBuffer[index2];

        float3 normal = normalize(cross(p1 - p0, p2 - p0));
        normalBuffer[baseIndex + tri * 3] = normal;  // Store normal for vertex 0
        normalBuffer[baseIndex + tri * 3 + 1] = normal;  // Store normal for vertex 1
        normalBuffer[baseIndex + tri * 3 + 2] = normal; // Store per-triangle normal
    }
}

[numthreads(32, 32 ,1)]
void CalculateNormalsSmooth (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)(numberOfVerticesPerSide - 1) || id.y >= (uint)(numberOfVerticesPerSide - 1)) {
        return;
    }

    int index = id.y * numberOfVerticesPerSide + id.x;
    atomicNormalBuffer[index * 3 + 0] = 0;
    atomicNormalBuffer[index * 3 + 1] = 0;
    atomicNormalBuffer[index * 3 + 2] = 0;

    // Calculate the base index for this quad's two triangles
    uint baseIndex = (id.y * (numberOfVerticesPerSide - 1) + id.x) * 6;
    [unroll]
    for (int tri = 0; tri < 2; tri++) {
        int index0 = triangleBuffer[baseIndex + tri * 3];
        int index1 = triangleBuffer[baseIndex + tri * 3 + 1];
        int index2 = triangleBuffer[baseIndex + tri * 3 + 2];

        float3 p0 = vertexBuffer[index0];
        float3 p1 = vertexBuffer[index1];
        float3 p2 = vertexBuffer[index2];

        float3 normal = normalize(cross(p1 - p0, p2 - p0)) * 10000.0; // Use a large scaling factor
        int3 scaledNormal = int3(normal.x, normal.y, normal.z); // Convert to int for atomic operations
        InterlockedAdd(atomicNormalBuffer[index0 * 3 + 0], scaledNormal.x);
        InterlockedAdd(atomicNormalBuffer[index0 * 3 + 1], scaledNormal.y);
        InterlockedAdd(atomicNormalBuffer[index0 * 3 + 2], scaledNormal.z);

        InterlockedAdd(atomicNormalBuffer[index1 * 3 + 0], scaledNormal.x);
        InterlockedAdd(atomicNormalBuffer[index1 * 3 + 1], scaledNormal.y);
        InterlockedAdd(atomicNormalBuffer[index1 * 3 + 2], scaledNormal.z);

        InterlockedAdd(atomicNormalBuffer[index2 * 3 + 0], scaledNormal.x);
        InterlockedAdd(atomicNormalBuffer[index2 * 3 + 1], scaledNormal.y);
        InterlockedAdd(atomicNormalBuffer[index2 * 3 + 2], scaledNormal.z);
    }
}

[numthreads(32, 32 ,1)]
void NormalizeNormalsSmooth(uint3 id : SV_DispatchThreadID) {
    if(id.x >= (uint)numberOfVerticesPerSide || id.y >= (uint)numberOfVerticesPerSide) {
        return;
    }

    int index = id.y * numberOfVerticesPerSide + id.x;

    float3 normal = float3(
        (float)(atomicNormalBuffer[index * 3 + 0]),
        (float)(atomicNormalBuffer[index * 3 + 1]),
        (float)(atomicNormalBuffer[index * 3 + 2])
    );

    normalBuffer[index] = normalize(float3(0.0, 1.0, 0.0));
}

float GetTriangleArea(float2 a, float2 b, float2 c) {
    return abs((a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) * 0.5);
}

float4 ComputeBarycentricCoords(float2 p, float2 a, float2 b, float2 c) {
    float area1 = GetTriangleArea(p, b, c);
    float area2 = GetTriangleArea(p, c, a);
    float area3 = GetTriangleArea(p, a, b);

    float sumAreas = area1 + area2 + area3;
    float alpha = area1 / sumAreas;
    float beta = area2 / sumAreas;
    float gamma = area3 / sumAreas;

    return float4(area1 + area2 + area3, alpha, beta, gamma); // area, α, β, γ
}

[numthreads(32, 1, 1)]
void RetrieveOceanHeight(uint3 id : SV_DispatchThreadID) {
    if(id.x >= (uint)heightPointsArrayLength) {return;}

    float2 xzPosition = positionsToRetrieveHeightFromBuffer[id.x].xy; // .xy because it is a 2D float and z can't be used
    if (!(xzPosition.x >= oceanStartPosition.x && xzPosition.x <= oceanStartPosition.x + oceanWidth) ||
        !(xzPosition.y >= oceanStartPosition.z && xzPosition.y <= oceanStartPosition.z + oceanLength)) {
        return;
    }

    float xStep = oceanWidth / (numberOfVerticesPerSide - 1); // x distance between every vertex
    float zStep = oceanLength / (numberOfVerticesPerSide - 1); // z distance between every vertex
    
    float xPositionAlongWidth = xzPosition.x - oceanStartPosition.x; // Object space, relative to ocean startPosition
    float zPositionAlongLength = xzPosition.y -oceanStartPosition.z; // Object space, relative to ocean startPosition

    // Retrieve the bottom left index
    int xPositionIndex = floor(xPositionAlongWidth / xStep);
    int zPositionIndex = floor(zPositionAlongLength / zStep);

    int indexInPositionBufferBottomLeft = zPositionIndex * numberOfVerticesPerSide + xPositionIndex;
    int indexInPositionBufferTopLeft = indexInPositionBufferBottomLeft + numberOfVerticesPerSide;
    int indexInPositionBufferTopRight = indexInPositionBufferTopLeft + 1;
    int indexInPositionBufferBottomRight = indexInPositionBufferBottomLeft + 1;

    float3 bottomLeft = vertexBuffer[indexInPositionBufferBottomLeft];
    float3 topLeft = vertexBuffer[indexInPositionBufferTopLeft];
    float3 topRight = vertexBuffer[indexInPositionBufferTopRight];
    float3 bottomRight = vertexBuffer[indexInPositionBufferBottomRight];
    
    float totalTriangleArea1 = GetTriangleArea(bottomLeft.xz, topLeft.xz, topRight.xz); 
    float totalTriangleArea2 = GetTriangleArea(bottomLeft.xz, topRight.xz, bottomRight.xz);

    float4 triangleInfo1 = ComputeBarycentricCoords(xzPosition, bottomLeft.xz, topLeft.xz, topRight.xz);
    float4 triangleInfo2 = ComputeBarycentricCoords(xzPosition, bottomLeft.xz, topRight.xz, bottomRight.xz);

    // Store the height in the first position ofthe float2 (.x)
    if(abs(totalTriangleArea1 - triangleInfo1.x) < abs(totalTriangleArea2 - triangleInfo2.x)) {
        positionsToRetrieveHeightFromBuffer[id.x].x =  (triangleInfo1.y * bottomLeft.y) + (triangleInfo1.z * topLeft.y) + (triangleInfo1.w * topRight.y);
    } else {
        positionsToRetrieveHeightFromBuffer[id.x].x =  (triangleInfo2.y * bottomLeft.y) + (triangleInfo2.z * topRight.y) + (triangleInfo2.w * bottomRight.y);
    }
}

