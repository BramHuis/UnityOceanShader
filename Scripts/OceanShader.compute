// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FillVertexBuffer
#pragma kernel FillTriangleBuffer
#pragma kernel SimulateWaves
#pragma kernel CalculateNormals

struct GerstnerWave {
    int toggle;
    float waveAmplitude;
    float waveSteepness;
    float wavePhaseShift;
    float waveLength;
    float waveSpeed;
    float2 windDirection;
};

// Parameters for setting up the vertices and triangles
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<int> triangleBuffer;
float3 oceanStartPosition;
int numberOfVerticesPerSide;
float oceanWidth;
float oceanLength;

// Parameters for simulating waves
RWStructuredBuffer<float3> normalBuffer;
StructuredBuffer<GerstnerWave> gerstnerWaveBuffer;
int numberOfGerstnerWaves;
float time;
#define PI 3.14159265359



[numthreads(32,32,1)]
void FillVertexBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= (uint)numberOfVerticesPerSide || id.y > (uint)numberOfVerticesPerSide) {
        return;
    }

    int index = id.y * numberOfVerticesPerSide + id.x;
    float xStep = oceanWidth / (numberOfVerticesPerSide - 1);
    float zStep = oceanLength / (numberOfVerticesPerSide - 1);
    vertexBuffer[index] = float3(oceanStartPosition.x + id.x * xStep, oceanStartPosition.y, oceanStartPosition.z + id.y * zStep);
}

[numthreads(32,32,1)]
void FillTriangleBuffer (uint3 id : SV_DispatchThreadID) {
    if(id.x >= ((uint)numberOfVerticesPerSide - 1) || id.y >= ((uint)numberOfVerticesPerSide - 1)) {
        return;
    }
    
    int baseIndex = (id.y * (numberOfVerticesPerSide - 1) + id.x) * 6;

    int bottomLeft = id.y * numberOfVerticesPerSide + id.x;
    int topLeft = bottomLeft + numberOfVerticesPerSide;
    int topRight = topLeft + 1;
    int bottomRight = bottomLeft + 1;

    // Top-left, Top-right, Bottom-left
    triangleBuffer[baseIndex] = bottomLeft;
    triangleBuffer[baseIndex + 1] = topLeft;
    triangleBuffer[baseIndex + 2] = topRight;

    // Top-right, Bottom-right, Bottom-left
    triangleBuffer[baseIndex + 3] = bottomLeft;
    triangleBuffer[baseIndex + 4] = topRight;
    triangleBuffer[baseIndex + 5] = bottomRight;
}

float3 Gerstner(float3 vertex, float2 direction, float time, float speed, float steepness, float amplitude, float wavelength) {
	float displaced_x = (steepness / wavelength) * direction.x * cos(wavelength * dot(direction, vertex.xz) + speed * time);
	float displaced_z = (steepness / wavelength) * direction.y * cos(wavelength * dot(direction, vertex.xz) + speed * time);
	float displaced_y = amplitude * sin(wavelength * dot(direction, vertex.xz) + speed * time);
	return float3(displaced_x, displaced_y, displaced_z);
}

[numthreads(32,32,1)]
void SimulateWaves (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)numberOfVerticesPerSide || id.y >= (uint)numberOfVerticesPerSide) {
        return;
    }

    
    // Calculate the index in the vertex buffer
    int index = id.y * numberOfVerticesPerSide + id.x;
    float xStep = oceanWidth / (numberOfVerticesPerSide - 1);
    float zStep = oceanLength / (numberOfVerticesPerSide - 1);
    float3 originalVertexPos = float3(oceanStartPosition.x + id.x * xStep, oceanStartPosition.y, oceanStartPosition.z + id.y * zStep);

    float3 finalPosition;
    for (int i = 0; i < numberOfGerstnerWaves; i++) {
        if (gerstnerWaveBuffer[i].toggle) {
            finalPosition += Gerstner(originalVertexPos, gerstnerWaveBuffer[i].windDirection, time, gerstnerWaveBuffer[i].waveSpeed, gerstnerWaveBuffer[i].waveSteepness, gerstnerWaveBuffer[i].waveAmplitude, gerstnerWaveBuffer[i].waveLength);
        }
    }
    vertexBuffer[index] = originalVertexPos + finalPosition;
}

[numthreads(32,32,1)]
void CalculateNormals (uint3 id : SV_DispatchThreadID) {
    if (id.x >= (uint)(numberOfVerticesPerSide - 1) || id.y >= (uint)(numberOfVerticesPerSide - 1)) {
        return;
    }
    
    // Calculate the base index for this quad's two triangles
    uint baseIndex = (id.y * (numberOfVerticesPerSide - 1) + id.x) * 6;
    [unroll]
    for (int tri = 0; tri < 2; tri++) {
        int index0 = triangleBuffer[baseIndex + tri * 3];
        int index1 = triangleBuffer[baseIndex + tri * 3 + 1];
        int index2 = triangleBuffer[baseIndex + tri * 3 + 2];

        float3 p0 = vertexBuffer[index0];
        float3 p1 = vertexBuffer[index1];
        float3 p2 = vertexBuffer[index2];

        float3 normal = normalize(cross(p1 - p0, p2 - p0));
        normalBuffer[baseIndex + tri * 3] = normal;  // Store normal for vertex 0
        normalBuffer[baseIndex + tri * 3 + 1] = normal;  // Store normal for vertex 1
        normalBuffer[baseIndex + tri * 3 + 2] = normal; // Store per-triangle normal
    }
}




